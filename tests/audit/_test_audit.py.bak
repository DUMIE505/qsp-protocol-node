"""
Tests the flow of receiving audit requests and 
their flow within the QSP audit node
"""
import os
from timeout_decorator import timeout
from threading import Thread
import unittest

from audit import QSPAuditNode
from config import Config

from utils.io import resource_path

class TestQSPAuditNode(unittest.TestCase):
    
    def setUp(self):
        """
        Starts the execution of the QSP audit node as a separate thread.
        """
        self.__cfg = Config("test", resource_path("test_config.yaml"))
        self.__account = self.__cfg.web3_client.eth.accounts[self.__cfg.account_id]
        self.__audit_node = QSPAuditNode(
            self.__account,
            self.__cfg.internal_contract, 
            self.__cfg.analyzer,
            self.__cfg.min_price,
            self.__cfg.evt_polling,
        )
        
        Thread(target=self.__audit_node.run).start()

    
    @timeout(15, timeout_exception=StopIteration)
    def test_contract_audit_request(self):
        # Sets a filter for report submission events
        evt_filter = self.__cfg.internal_contract.on("LogReportSubmitted")
        evts = []

        self.__requestAudit("DAOBug.sol")

        # Busy waits on receiving events up to the configured
        # timeout (60s)
        while evts == []:
            evts = evt_filter.get()

        self.assertTrue(len(evts) == 1)


    def __requestAudit(self, contract_name):
        from web3 import Web3
        # Submits a request for auditing a smart contract
        self.__cfg.internal_contract.transact({"from": self.__account}).doAudit(
            Web3.toText(text="abc")
        )

    def tearDown(self):
        """
        Stops the execution of the current QSP audit node.
        """
        self.__audit_node.stop()

