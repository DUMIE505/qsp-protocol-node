#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2018 Quantstamp, Inc. All rights reserved.  This content shall not be used, copied,          #
# modified, redistributed, or otherwise disseminated except to the extent expressly authorized by  #
# Quantstamp for credentialed users. This content and its use are governed by the Quantstamp       #
# Demonstration License Terms at <https://s3.amazonaws.com/qsp-protocol-license/LICENSE.txt>.                                                    #
#                                                                                                  #
####################################################################################################

##################################################################

# Imports common definitions
source "$WRAPPER_HOME"/utils/common


# Generates an error report without warnings
function report_errors {
    "$WRAPPER_HOME/utils/make_error_report" "$1" "$2"
}

# Generates an error report with warnings
function report_warnings_and_errors {
    "$WRAPPER_HOME/utils/make_error_report" "$1"
}

##################################################################
# Setup
##################################################################

# Creates a temporary folder that will be deleted once
# this script executes

readonly TMP_FOLDER="$STORAGE_DIR/$$"
mkdir "$TMP_FOLDER" &> /dev/null
on_exit_do rm -rf "$TMP_FOLDER"

readonly LOG_OUTPUT="$TMP_FOLDER/output.log"
on_exit_do rm -f "$LOG_OUTPUT"

readonly TRACE_OUTPUT="$TMP_FOLDER/trace.log"
on_exit_do rm -f "$TRACE_OUTPUT"

echo ">> Wrapper setup finished" >> "$TRACE_OUTPUT"

##################################################################
# once step
##################################################################

# Only run `once`` if it has not been executed before
if [[ ! -f "$STORAGE_DIR/.once" ]] ; then
    echo ">> once script was called" >> "$TRACE_OUTPUT"
    "$WRAPPER_HOME"/once >> "$LOG_OUTPUT" 2>&1 || \
        { report_errors "$LOG_OUTPUT" "$TRACE_OUTPUT"; exit 1; }
else
    echo ">> once script was NOT called" >> "$TRACE_OUTPUT"
    > "$STORAGE_DIR/.once"
fi

echo ">> Once step finished execution" >> "$TRACE_OUTPUT"

##################################################################
# pre-run step
##################################################################
# Prepares the wrapper
"$WRAPPER_HOME"/pre_run &> "$LOG_OUTPUT" || \
    { report_errors "$LOG_OUTPUT" "$TRACE_OUTPUT"; exit 1; }

echo ">> pre_run script was executed" >> "$TRACE_OUTPUT"

# Copies the input contract to the temporary folder just created
cp "$CONTRACT_PATH" "$TMP_FOLDER" >> "$LOG_OUTPUT" 2>&1 || \
    { report_errors "$LOG_OUTPUT" "$TRACE_OUTPUT"; exit 1; }

echo ">> Contracts were copied" >> "$TRACE_OUTPUT"

CONTRACT_FILENAME=$(realpath "$CONTRACT_PATH" | awk -F '/' '{ print $NF  }')

ANALYZER_VULNERABILITIES="$WRAPPER_HOME"/resources/vulnerabilities
ANALYZER_VERSION=$(echo "$DOCKER_IMAGE" | egrep -o ':[0-9A-Za-z]+$' | cut -d ':' -f2)

echo ">> Pre-run step finished execution" >> "$TRACE_OUTPUT"


##################################################################
# run step and post-run
##################################################################

# Executes the analyzer
docker run --rm -v "$TMP_FOLDER":/shared/ -i "$DOCKER_IMAGE" -o json -x "/shared/$CONTRACT_FILENAME" \
    &> "$LOG_OUTPUT"

echo ">> Docker finished" >> "$TRACE_OUTPUT"

# Mythril can fail with error code 0 providing an error message in json
cat "$LOG_OUTPUT" | grep "\"success\": true" >/dev/null || \
    { report_errors "$LOG_OUTPUT" "$TRACE_OUTPUT"; exit 1; }

echo ">> Cleaning up" >> "$TRACE_OUTPUT"

# Cleans up any resources
"$WRAPPER_HOME"/post_run >> "$LOG_OUTPUT" 2>&1

echo ">> Creating the report" >> "$TRACE_OUTPUT"

ANALYZER_CMD="docker run --rm -v \"$TMP_FOLDER\":/shared/ -i \"$DOCKER_IMAGE\" -o json -x \"/shared/$CONTRACT_FILENAME\""
"$WRAPPER_HOME/utils/mk_success_report" "${ANALYZER_VERSION}" "${ANALYZER_CMD}" "${ANALYZER_VULNERABILITIES}"  \
    "${ORIGINAL_NAME}" "${LOG_OUTPUT}" || \
        { report_errors "$LOG_OUTPUT" "$TRACE_OUTPUT"; exit 1; }

# Exit with a success status code
exit 0
