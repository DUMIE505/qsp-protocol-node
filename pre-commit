#!/usr/bin/env python

####################################################################################################
#                                                                                                  #
# (c) 2018 Quantstamp, Inc. All rights reserved.  This content shall not be used, copied,          #
# modified, redistributed, or otherwise disseminated except to the extent expressly authorized by  #
# Quantstamp for credentialed users. This content and its use are governed by the Quantstamp       #
# Demonstration License Terms at <https://s3.amazonaws.com/qsp-protocol-license/LICENSE.txt>.                                                    #
#                                                                                                  #
####################################################################################################

"""
Taken from https://github.com/cbrueffer/pep8-git-hook
"""
from __future__ import with_statement, print_function
import os
import re
import shutil
import subprocess
import sys
import tempfile

# don't fill in both of these
select_codes = []
ignore_codes = ["E121", "E122", "E123", "E124", "E125", "E126", "E127", "E128",
                "E129", "E131", "E501"]
# Add things like "--max-line-length=120" below
overrides = ["--max-line-length=100"]


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out


def check_solidity_versions():
    try:
        # Dockerfile
        result = system("git", "grep", "github.com/ethereum", "Dockerfile").decode("utf-8")
        dockerfile_version = result.split("/")[7]  # the v0.x.y download version
        if not dockerfile_version.startswith("v"):
            raise Exception("Error in pre-commit: check ethereum version in Dockerfile")
        dockerfile_version = dockerfile_version[1:]

        # QuantstampAuditMock
        result = system("git", "grep", "pragma", "tests/resources/QuantstampAuditMock.sol").decode("utf-8")
        quantstamp_mock_version = result.split()[-1].strip(";\\n'")

        # README.md
        result = str(system("git", "grep", "compiler for Solidity", "README.md"))
        readme_version = [i for i in result.split() if i.startswith("0")][0].strip(".")

        if dockerfile_version != quantstamp_mock_version or quantstamp_mock_version != readme_version:
            print("Ensure that the solidity versions in Dockerfile, README.md, and QuantstampAuditMock are in sync.")
            print("Also ensure that the homebrew-ethereum link in README.md has been updated.")
            sys.exit(1)

    except Exception as e:
        print("The format of some files no longer conform to the pre-commit checks.")
        print("Check '.git/hooks/pre-commit'.")
        print(e)
        sys.exit(1)


def main():
    check_solidity_versions()
    modified = re.compile('^[AM]+\s+(?P<name>.*\.py$)', re.MULTILINE)
    files = system('git', 'status', '--porcelain').decode("utf-8")
    files = modified.findall(files)

    tempdir = tempfile.mkdtemp()
    for name in files:
        filename = os.path.join(tempdir, name)
        filepath = os.path.dirname(filename)

        if not os.path.exists(filepath):
            os.makedirs(filepath)
        with open(filename, 'w') as f:
            system('git', 'show', ':' + name, stdout=f)

    args = ['pycodestyle']
    if select_codes and ignore_codes:
        print(u'Error: select and ignore codes are mutually exclusive')
        sys.exit(1)
    elif select_codes:
        args.extend(('--select', ','.join(select_codes)))
    elif ignore_codes:
        args.extend(('--ignore', ','.join(ignore_codes)))
    args.extend(overrides)
    args.append('.')
    output = system(*args, cwd=tempdir)
    shutil.rmtree(tempdir)
    if output:
        print(u'PEP8 style violations have been detected.  Please fix them\n'
              'or force the commit with "git commit --no-verify".\n')
        print(output.decode("utf-8"),)
        sys.exit(1)


if __name__ == '__main__':
    main()

