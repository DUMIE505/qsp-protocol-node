#!/bin/bash

################################################
# Helper functions
################################################

readonly SUCCESS="0"

function usage() {
    echo "usage: qsp-audit-node [-t | [-h] [-d] [-a AUTO_RESTART]" &> /dev/stderr
    echo "                      environment config-yaml]"          &> /dev/stderr
    exit 1
}

################################################
# Main flow
################################################

if [[ "$#" == "1" && "$1" == "-t" ]]; then
    PYTHONPATH=./tests:./qsp_protocol_node pytest --cov=qsp_protocol_node -s -v --disable-pytest-warnings --cov-config .coveragerc --cov-report term-missing --cov-report html tests/
    exit $?
fi

# Set auto restart to off by default
AUTO_RESTART="0"

# Default logging level: debug node
export QSP_LOGGING_LEVEL="DEBUG"

while getopts "d:ah" FLAG; do
    case $FLAG in
        # Debug level
        d)
            # See https://docs.python.org/3/library/logging.html#levels
            case $OPTARG in
                CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET)
                    export QSP_LOGGING_LEVEL="$OPTARG"
                ;;

                *)
                    echo "Unknown debug level. Expecting one of: CRITICAL, ERROR, WARNING, INFO, DEBUG (default), NOTSET" &> /dev/stderr
                    exit 1
                ;;
            esac
        ;;

        # Enables audto restart
        a)
            export AUTO_RESTART="1"
        ;;

        # Incorrect usage
        *)
            usage
        ;;
    esac
done

shift $(($OPTIND-1))


if [[ "$#" != "2" ]] ; then
   echo "environment and config-yaml are mandatory parameters, but not provided" &> /dev/stderr
   usage
fi

# Two mandatory arguments are expected at this point:
# environment and config-yaml (in this order)

export QSP_ENV="$1"
export QSP_CONFIG="$2"

while true ; do

    # Runs the audit node
    python -W ignore::DeprecationWarning -m qsp_protocol_node

    # Fetches the return code of the node
    RETURN_CODE=$?

    if [[ "$RETURN_CODE" == "$SUCCESS" ]]; then
        exit "$SUCCESS"
    fi

    # If auto restart is not set, then quit.
    if [[ "$AUTO_RESTART" == "0" ]] ; then
        exit "$RETURN_CODE"
    fi

    # Otherwise, the audit node has failed and must be restarted.
    # Wait 30s to do so.

    echo -n "Restarting the audit node in 30s "
    for i in `seq 1 30`; do
        echo -n "."
        sleep 1
    done

    echo ""
done
