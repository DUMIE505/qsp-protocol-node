    def test_create_logging_streaming_provider_ok(self):
        """
        Tests that the CloudWatch provider can be created and is properly returned.
        """
        streaming_provider_name = "CloudWatchProvider"
        streaming_provider_args = {'log_group': 'grp', 'log_stream': 'stream',
                                   'send_interval_seconds': 10}
        result = self.config_utils.create_logging_streaming_provider(streaming_provider_name,
                                                                     streaming_provider_args,
                                                                     '0x12345')
        self.assertTrue(isinstance(result, CloudWatchProvider),
                        "The created provider is not a CloudWatchProvider")

    def test_create_logging_streaming_provider_not_ok(self):
        """
        Tests that wrong streaming provider specification causes an exception being thrown.
        """
        streaming_provider_name = "nonsens"
        streaming_provider_args = {'log_group': 'grp', 'log_stream': 'stream',
                                   'send_interval_seconds': 10}
        try:
            self.config_utils.create_logging_streaming_provider(streaming_provider_name,
                                                                streaming_provider_args,
                                                                '0x12345')
            self.fail("Succeeded to create streaming provider without proper provider name.")
        except ConfigurationException:
            # expected
            pass

        
    def test_configure_logging_no_stream(self):
        """
        Tests that logging can be configured properly without throwing exceptions.
        """
        account = "0x12345"
        self.config_utils.configure_logging_stream_provider(None, {}, account)
        args = {'log_group': 'grp', 'log_stream': 'stream', 'send_interval_seconds': 10}                
        self.config_utils.configure_logging_stream_provider("CloudWatchProvider",
        args, account)
        
    def test_configure_logging_stream_provider(self):
        name = "provider name"
        args = "arguments"
        return_value = "value"
        account = "0x12345"
        config = ConfigFactory.create_empty_config()
        config._Config__account = account
        utils = ConfigUtilsMock()
        utils.expect('configure_logging_stream_provider',
                     {'logging_streaming_provider_name': name,
                      'logging_streaming_provider_args': args, 'account': account},
                     return_value)
        result = config._Config__configure_logging_stream_provider(utils)
        self.assertEqual(return_value, result)
        utils.verify()

