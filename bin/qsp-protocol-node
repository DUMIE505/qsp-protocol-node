#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2019 Quantstamp, Inc. This content and its use are governed by the license terms at          #
# <https://s3.amazonaws.com/qsp-protocol-license/V2_LICENSE.txt>                                   #
#                                                                                                  #
####################################################################################################

################################################
# Initial setup
################################################

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

shopt -s expand_aliases
alias python=python3

export QSP_HOME=`dirname "$SCRIPT_DIR"`
export QSP_NODE_VERSION=$(cat "$QSP_HOME/VERSION" | tr -d '[:space:]')

################################################
# Helper functions
################################################

function usage() {
    echo "usage: qsp-protocol-node [-t TEST_ENV] [-h] [-d] [-a AUTO_RESTART] [-f SOL_FILE]" &> /dev/stderr
    echo "                      environment config-yaml"                                    &> /dev/stderr
    exit 1
}

################################################
# Main flow
################################################

# Pull usolc docker
echo `date`

# Set auto restart to off by default
AUTO_RESTART="0"

# Default logging level: debug node
export QSP_LOGGING_LEVEL="DEBUG"

while getopts "t:d:f:ah" FLAG; do
    case $FLAG in
        # Debug level
        t)
            export QSP_LOGGING_LEVEL="DEBUG"
            export PYTHONPATH="$QSP_HOME/tests:$QSP_HOME/src/qsp_protocol_node"

            case $OPTARG in
                ci)
                    pytest --cov="$QSP_HOME/src/qsp_protocol_node" -s -v --disable-pytest-warnings --cov-config .coveragerc --cov-report term-missing --cov-report html tests/
                    exit $?
                ;;

                local)
                    pytest --cov="$QSP_HOME/src/qsp_protocol_node" -s -v -m "not ci" --disable-pytest-warnings --cov-config .coveragerc --cov-report term-missing --cov-report html tests/
                    exit $?
                ;;

                *)
                    echo "Unknown test environment. Expecting one of: ci, local" &> /dev/stderr
                    exit 1
                ;;
            esac
        ;;
                
        d)
            # See https://docs.python.org/3/library/logging.html#levels
            case $OPTARG in
                CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET)
                    export QSP_LOGGING_LEVEL="$OPTARG"
                ;;

                *)
                    echo "Unknown debug level. Expecting one of: CRITICAL, ERROR, WARNING, INFO, DEBUG (default), NOTSET" &> /dev/stderr
                    exit 1
                ;;
            esac
        ;;

        # Enables auto restart
        a)
            export AUTO_RESTART="1"
        ;;

        f)
            export SOL_FILE="$OPTARG"
        ;;

        # Incorrect usage
        *)
            usage
        ;;
    esac
done

shift $(($OPTIND-1))

if [[ "$#" != "2" ]] ; then
   echo "environment and config-yaml are mandatory parameters, but not provided" &> /dev/stderr
   usage
fi

if [[ -v $SOL_FILE ]] && [[ "$AUTO_RESTART" != "0" ]] ; then
    echo "SOL_FILE IS $SOL_FILE"
    echo "AUTO_RESTART IS $AUTO_RESTART"
    echo "sol_file [-f] is mutually exclusive to auto_restart [-a]" &> /dev/stderr
    usage
fi

# Two mandatory arguments are expected at this point:
# environment and config-yaml (in this order)

export QSP_ENV="$1"
export QSP_CONFIG="$2"

readonly SUCCESS="0"

export PYTHONPATH="$QSP_HOME/src"
while true ; do
    
    # Runs the audit node (in foreground)
    python -W ignore::DeprecationWarning -m qsp_protocol_node

    # Fetches the return code of the node
    RETURN_CODE=$?

    if [[ "$RETURN_CODE" == "$SUCCESS" ]]; then
        exit "$SUCCESS"
    fi

    # If auto restart is not set, then quit.
    if [[ "$AUTO_RESTART" == "0" ]] ; then
        exit "$RETURN_CODE"
    fi

    # Otherwise, the audit node has failed and must be restarted.
    # Wait 30s to do so.

    echo -n "Restarting the audit node in 30s "
    for i in `seq 1 30`; do
        echo -n "."
        sleep 1
    done

    echo ""
done
