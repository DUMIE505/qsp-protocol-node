#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2018, 2019 Quantstamp, Inc. This content and its use are governed by the license terms at    #
# <https://s3.amazonaws.com/qsp-protocol-license/V2_LICENSE.txt>                                   #
#                                                                                                  #
####################################################################################################

set -e

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

trap cleanup SIGINT SIGTERM

function cleanup() {
	export PARENT_PID=$$
	${SCRIPT_DIR}/stop-node
	if [[ $(docker ps -q --filter ancestor=qsp-protocol-node) ]]; then
		read -r -p "To stop forcefully enter f, any other key to quit: " response
		if [[ "$response" =~ ^([fF])+$ ]]; then 
    	${SCRIPT_DIR}/stop-node -f
		fi
  	exit 0
	fi
}

source "$SCRIPT_DIR/common"

if ! [ -d "$LOG_DIR" ]; then
    mkdir "$LOG_DIR"
fi

readonly RESOURCES_DIR="$(dirname ${SCRIPT_DIR})/resources"
readonly BIN_DIR="$(dirname ${SCRIPT_DIR})/bin"

# Check if the script is running in background
case $(ps -o stat= -p $$) in
  *+*) IN_BACKGROUND="false" ;;
  *) IN_BACKGROUND="true" ;;
esac

if [[ $(docker ps -q --filter ancestor=qsp-protocol-node) ]]; then
  echo "Audit node is already running. Check ${LOG_PATH} for logs"
  exit 0
fi

cd "$RESOURCES_DIR"

if [[ "x$QSP_ETH_PASSPHRASE" == "x" ]] ; then
  echo "Environment variable QSP_ETH_PASSPHRASE is not set" &> /dev/stderr
  exit 1
fi

if [[ "x$QSP_ETH_AUTH_TOKEN" == "x" ]] ; then
  echo "Environment variable QSP_ETH_AUTH_TOKEN is not set" &> /dev/stderr
  exit 1
fi

if [ ! -f app.tar ]; then
  echo "app.tar file not present. Exiting!!"
  exit 1
fi

echo $$ > /tmp/qsp-protocol.pid
touch "$PWD/event_database.db"

QSP_ENV="testnet"
QSP_CONFIG="resources/config.yaml"

rotate_logs
touch "$LOG_PATH"

readonly QSP_USOLC_BIN="/opt/usolc/bin"

docker load --input app.tar && \
docker run -d \
	-v /var/run/docker.sock:/var/run/docker.sock \
	-v /tmp:/tmp:Z \
    -v "$BIN_DIR/solc":"$QSP_USOLC_BIN_DIR/solc":Z \
	-v "$LOG_PATH":/var/log/qsp-protocol/qsp-protocol.log:Z \
	-v "$RESOURCES_DIR/keystore":/app/resources/keystore:Z \
	-v "$RESOURCES_DIR/contracts":/app/resources/contracts:Z \
	-v "$RESOURCES_DIR/config.yaml":/app/resources/config.yaml:Z \
	-v "$RESOURCES_DIR/event_database.db":/root/.audit_node.db:Z \
	-e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
	-e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
	-e AWS_DEFAULT_REGION="us-east-1" \
	-e QSP_ETH_PASSPHRASE="$QSP_ETH_PASSPHRASE" \
	-e QSP_ETH_AUTH_TOKEN="$QSP_ETH_AUTH_TOKEN" \
    -e QSP_USOLC_BIN_DIR="$QSP_USOLC_BIN_DIR" \
	qsp-protocol-node sh -c "./bin/qsp-protocol-node -a $QSP_ENV $QSP_CONFIG"

# Tail the logs if not in background
if [ "$IN_BACKGROUND" == "false" ]; then
   while [ ! -f "$LOG_PATH" ]
   do
     sleep 1
   done
   tail -f -n +1 "$LOG_PATH"
   docker logs --follow $(docker ps -a -q --latest --filter "status=running" --filter ancestor=qsp-protocol-node)
fi

