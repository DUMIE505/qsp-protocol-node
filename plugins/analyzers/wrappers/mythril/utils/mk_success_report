#!/usr/bin/env python

####################################################################################################
#                                                                                                  #
# (c) 2018 Quantstamp, Inc. All rights reserved.  This content shall not be used, copied,          #
# modified, redistributed, or otherwise disseminated except to the extent expressly authorized by  #
# Quantstamp for credentialed users. This content and its use are governed by the Quantstamp       #
# Demonstration License Terms at <https://s3.amazonaws.com/qsp-protocol-license/LICENSE.txt>.                                                    #
#                                                                                                  #
####################################################################################################

import argparse
import json
import sys


class MythrilIssue:
    """
    A replica of the issue class from the Mythril repository on Github with some added custom code
    https://github.com/ConsenSys/mythril/blob/master/mythril/analysis/report.py
    """

    def __init__(self, contract, function, address, title, _type="Informational", description="",
                 debug=""):
        self.title = title
        self.contract = contract
        self.function = function
        self.address = address
        self.description = description
        self.type = _type
        self.debug = debug
        self.file_name = None
        self.code = None
        self.lineno = None

    def as_dict(self):
        """Retained for documentation purposes only. file_name, lineno and code are optional."""
        issue = {'title': self.title, 'description': self.description, 'function': self.function,
                 'type': self.type, 'address': self.address, 'debug': self.debug}
        if self.file_name and self.lineno:
            issue['file_name'] = self.file_name
            issue['lineno'] = self.lineno
        if self.code:
            issue['code'] = self.code
        return issue

    def as_vulnerability(self, ref_id, vulnerability_mapping):
        vulnerability = self.title
        solidity_file = self.file_name
        contract_name = self.contract
        # coverage is not available in mythril
        # coverage = 11.1234
        qsp_type = "other"
        try:
            qsp_type = vulnerability_mapping[self.title.strip()]
        except KeyError:
            if "to a user-supplied address" in self.title:
                # This title is dynamically generated by Mythril and contains the type of the call
                qsp_type = "delegate_call_to_untrusted_contract"
            else:
                # We cannot map this name, the vulnerability name must be new in mythril
                pass

        vulnerability_report = {
            'type': qsp_type,
            'file': solidity_file,
            'description': self.description,
        }
        if contract_name is not None:
            vulnerability_report['contract'] = contract_name
        instances_found = [{
            'ref_id': ref_id,
            'start_line': self.lineno,
        }]
        vulnerability_report['instances'] = instances_found
        return vulnerability_report

    @staticmethod
    def from_dict(original_file_name, **dictionary):
        issue = MythrilIssue(None, None, None, None)
        issue.__dict__.update(dictionary)
        issue.file_name = original_file_name
        return issue

def load_json(json_file):
    json_dict = {}

    with open(json_file) as f:
        json_dict = json.load(f)
    
    return json_dict

def load_list(input_list):
    """
    Loads a list of single-line items from a file
    """
    with open(input_list) as f:
        lines = f.read().splitlines()

    return lines


def main(argv):
    parser = argparse.ArgumentParser(description='Report formatting of Mythril results')

    parser.add_argument(
        'vulnerability_mapping',
        metavar='vulnerability_mapping',
        type=str,
        help='mapping (json) of vulnerabilities reported by the analyzer to a unified type'
    )

    parser.add_argument(
        'original_file_name',
        metavar='original_file_name',
        type=str,
        help='the original name of the file that is being analyzed'
    )
    parser.add_argument(
        'log_output',
        metavar='log_output',
        type=str,
        help='log to be parsed'
    )

    # Validates input arguments
    args = parser.parse_args()
    vulnerabilities = load_json(args.vulnerability_mapping)

    vulnerability_mapping = {}
    for key in vulnerabilities.keys():
        vulnerability_mapping[key] = vulnerabilities[key]['type']

    # Declares final_report dictionary
    final_report = {'status': 'success'}

    # starts converting issues
    issue_reference = 0
    potential_vulnerabilities = []
    
    report_file = open(args.log_output)
    report_dict = json.loads(report_file.read())
    report_file.close()
    if report_dict['success']:
        for issue in report_dict['issues']:
            mythril_issue = MythrilIssue.from_dict(args.original_file_name, **issue)
            vulnerability = mythril_issue.as_vulnerability(issue_reference, vulnerability_mapping)
            potential_vulnerabilities.append(vulnerability)
            issue_reference += 1

    # adds suspected vulnerabilities and prints the result
    if len(potential_vulnerabilities) > 0:
        final_report['potential_vulnerabilities'] = potential_vulnerabilities

    print(json.dumps(final_report, indent=2))


if __name__ == "__main__":
    main(sys.argv)
