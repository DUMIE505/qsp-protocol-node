#!/bin/bash

####################################################################################################
#                                                                                                  #
# (c) 2018 Quantstamp, Inc. All rights reserved.  This content shall not be used, copied,          #
# modified, redistributed, or otherwise disseminated except to the extent expressly authorized by  #
# Quantstamp for credentialed users. This content and its use are governed by the Quantstamp       #
# Demonstration License Terms at <https://s3.amazonaws.com/qsp-protocol-license/LICENSE.txt>.                                                    #
#                                                                                                  #
####################################################################################################

QSP_NODE="make run"

# Must be kept in synch with the return codes given in 
# qsp_protocol_node/qsp_protocol_node.py.

SUCCESS="0"

while true ; do

    # NOTE: since this script executes within a docker image,
    # the parameters passed in to it stem from the Makefile,
    # which are necessarily correct -- we know how to run
    # the node :) 

    # Invokes the audit node; no argument validation   
    $QSP_NODE $@

    # Fetches the return code of the node
    return_code=$?

    # If the node has successfully finished,
    # it means the node operator meant to kill it.
    # Respect that wish and do not restart the node.
    # For the record:
    #    audit node exit code == 0: SIGKILL sent by user
    #    audit node exit code > 0: error
    # These values, if captured by make, 
    # are translated as follows:
    #    audit node exit code == 0: Makefile exists with code 0
    #    audit node exit code > 0: Makefile exists with code 2
    if [[ "$return_code" == "$SUCCESS" ]]; then
        exit 0
    fi

    # Sleeps 30 seconds before starting the audit node.
    echo -n "Restarting the audit node in 30s "
    for i in `seq 1 30`; do
        echo -n "."
        sleep 1
    done

    echo ""

done
